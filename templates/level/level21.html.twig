<h2>JSON</h2>
<p>
    A good excursion on JSON can be found <a href="https://dev.mysql.com/doc/refman/8.0/en/json-search-functions.html">here
        (mysql.com)</a>
</p>

<h3>JSON_EXTRACT</h3>
<p>
    Returns data from a JSON document, selected from the parts of the document matched by the path arguments.
    Returns NULL if any argument is NULL or no paths locate a value in the document.
    An error occurs if the json_doc argument is not a valid JSON document or any path argument is not a valid path
    expression.
</p>
<p>
    MySQL supports the -> operator as shorthand for this function as used with 2 arguments
    where the left hand side is a JSON column identifier (not an expression)
    and the right hand side is the JSON path to be matched within the column.
</p>

<pre>
SELECT JSON_EXTRACT(json_column, "$.id"), json_column->"$.id"
FROM table_with_json_column
</pre>

<h3>JSON_UNQUOTE</h3>
<p>
    JSON Values are quoted from time to time. JSON_UNQUOTE removes the surrounding quotes.
</p>
<p>
    This is an improved, unquoting extraction operator.
    Whereas the -> operator simply extracts a value,
    the ->> operator in addition unquotes the extracted result.
    In other words, given a JSON column value column and a path expression path,
    the following three expressions return the same value:
</p>
<pre>
SELECT
    JSON_UNQUOTE(JSON_EXTRACT(json_column, "$.id")),
    JSON_UNQUOTE(json_column->"$.id"),
    json_column->>"$.id"
FROM json_table
</pre>

<div class="message message-hint">
    The ->> operator can be used wherever JSON_UNQUOTE(JSON_EXTRACT()) would be allowed.
    This includes (but is not limited to) SELECT lists, WHERE and HAVING clauses, and ORDER BY and GROUP BY clauses.
</div>